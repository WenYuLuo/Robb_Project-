#pragma once

#include <vector>
#include <string>
#include <Windows.h>

typedef unsigned int uint32_t;
typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
using namespace std;

#define MS_NUM 7 // ???????

struct MSCODE
{
    timeval _timestamp; // ?????
    int _code; // ????
};

// ???????????????? //
class CDetectMusicalScale
{
public:
    CDetectMusicalScale(void);
    ~CDetectMusicalScale(void);

    bool Init(uint32_t fs, uint32_t frame_len = 512, uint32_t step = 256, uint32_t nfft = 2048);
    void Detect(float *data, uint32_t data_size, timeval timestamp, std::vector<string>& szcode);
    void SetThreshold(float ms_energy_ratio, float sub_ms_engergy_ratio, float ms_2_ms_engergy_ratio, float max_timeval_div);

protected:
    // ???
    float _ms_energy_ratio; // ???????????(_f_low,  _f_high) ????????????
    float _sub_ms_engergy_ratio; // ?????????????????????????
    float _ms_2_ms_engergy_ratio; // ????????????????
    float _max_timeval_div; // // ??????????????????

protected:

    void SubbandEnergy(float *frame, uint32_t frame_len, int &code);
    void ProcessCodes(std::vector<MSCODE> &codes, std::vector<MSCODE> &pro_codes, std::vector<std::string> &sz_codes);
    void HannFun(float *frame, uint32_t frame_len);
    int CountBits(int hist[MS_NUM]);

    std::string Code(int code);

    std::vector<MSCODE> _codes;
    std::vector<MSCODE> _pro_codes;

    float *_hann_win; // ????????? //

    float *_buffer; // ????????? //
    uint32_t _buffer_size; // ????????????? //
    uint32_t _data_len; // ???????????????? //

    uint32_t _nfft; // ??????ÈÎ??????? //
    uint32_t _step; // ???????? //
    uint32_t _frame_len; // ??¦Ä???????????? //

    uint32_t _fs; // ??????????????

    int _win_size;

    float REFFREQUENCY[MS_NUM]; // ???????
    int REF_FREQ_INDEX[MS_NUM]; // ???????????DFT????

    int MAX_BIT_NUM; // ???????????????
    int BEGIN_CODE; // ???????

    float _f_low; // ?????????
    int _f_low_idx; // ?????????????DFT????
    float _f_high; // ?????????
    int _f_high_idx; // ?????????????DFT????
    float _back_ground_energy[2]; // (_f_low,  _f_high) ??¦Á???????????

    uint32_t FRAME_NUM; // ????????????? //
    uint32_t _count;
};

int get_time_now(struct timeval * tp, struct timezone * tzp);
timeval timeval_add_dt(timeval timestamp, double dt);
double timeval_div(timeval ts1, timeval ts2);
